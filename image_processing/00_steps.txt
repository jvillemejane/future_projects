

01_images
=========
	
Start by discovering PGM images (without compression - grayscale)

* :file:`01_imagePGM_class` : a class that describes a PGM image and its content, with:
	* :code:`readImagePGM` method to read an image from its file name 
	* overloading of the << operator
	* Python with list !!	
* :file:`02_imagePGM_modular` : the same as previously but with:
	* separated files for class declaration, definition and main program
	* :code:`writeImagePGM` method to write an image
* :file:`03_imagePGM_rotate` : the same as previously but with:
	* :code:`rotateImagePGM` method to rotate an image of 90Â°
	* execution time of rotation and reading file

To do ?
* PPM images in RGB
* Python with array to compare execution time to open PGM file


02_convolution and morphologic transforms
=========================================

* :file:`04_imagePGM_first_convolution` : introducing the convolution with a kernel. Kernel class.
* :file:`05_imagePGM_dilate_erode` : introducing the dilatation and erosion transforms.
* :file:`06_imagePGM_opening_closing` : introducing the opening and closing transforms.

03_OPENCV
=========

* Install OpenCV on Windows for MingW64  - could be long...
* :file:`07_opencv_first_try` : introducing OpenCV, open and display an image. /!\ OpenCV create a 3 channels image (R,G,B) even if the initial image is in grayscale. 
* :file:`08_opencv_mean_filters` : convolution with a specific kernel.
* :file:`09_opencv_erode_opening` : erosion, dilatation, opening and closing on image.